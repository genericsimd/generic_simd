
###Additional flag
# GSIMD=1 will turn on generic SIMD library
# make GSIMD=1

BSPROC_ROOT=../bsproc
GSIMD_DIR=../../../../../include

USE_PPC=0
OS = $(shell uname)
ifeq ($(OS), AIX)
 USE_PPC = 1
else
 MACHINE_NAME = $(shell uname -m)
 ifeq ($(firstword $(filter ppc64,$(MACHINE_NAME))),ppc64)
   USE_PPC = 1
 endif
endif

CC = gcc -g
CPP = g++ -g
CFLAGS = -I${BSPROC_ROOT}/include/phy -I${BSPROC_ROOT}/include -Wall -O2  -D_GNU_SOURCE
LDFLAGS = -lm
ifeq ($(USE_PPC), 1)
  # penguin: why it does not work with -m64
ifeq (${GSIMD},1)
  CFLAGS += -maltivec -mvsx -mabi=altivec -mcpu=power7 -mtune=power7 -I${GSIMD_DIR} -flax-vector-conversions -Wno-int-to-pointer-cast -DGSIMD 
else
  CFLAGS += -maltivec -mvsx -mabi=altivec -mcpu=power7 -mtune=power7 -DVSXOPT
endif
else
ifeq (${GSIMD},1)
  CFLAGS += -DLOG_LEVEL=LOG_LEVEL_WARN -I${GSIMD_DIR} -Wno-int-to-pointer-cast -DGSIMD -m64 -msse4.2 -D_BS_MONITOR_ -D_AMC_INTERLEAVER_ -D_SOFTBIT_TWO_ -DIPP_OPT_TEMP730 -W 
else
  CFLAGS += -DLOG_LEVEL=LOG_LEVEL_WARN -DSSE2OPT -m64 -msse4.2 -D_BS_MONITOR_ -D_AMC_INTERLEAVER_ -D_SOFTBIT_TWO_ -DIPP_OPT_TEMP730 -W 
endif
endif

all: ${TARGET}

${TARGET}: ${OBJS}
	$(CPP) -o $@ $(CFLAGS) $(LDFLAGS) $^

.c.o:
	@$(RM) $@
	$(CC) -c $(CFLAGS) $<
	
.cpp.o:
	@$(RM) $@
	$(CPP) -c $(CFLAGS) $<

test:
	./${TARGET}

clean:
	$(RM) *.o ${TARGET} 
