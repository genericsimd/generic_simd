/**

 @mainpage  Generic SIMD Library
 
 @tableofcontents

 The Generic SIMD Library allowers users to write C++ SIMD codes that
 are portable across different SIMD ISAs.

 @section example An Example
 
@code HelloSIMD.cpp
#include <iostream>
#include <gsimd.h>

int main (int argc, char* argv[])
{
    svec4_f v1(1.1, 2.2, 3.3, 4.4);
    svec4_f v2 = v1 * 2;
    std::cout << "Hello World: " << v2 << std::endl;
    return 0;
}
@endcode

 Let's use the example above to illustrate some of the basics features
 of the library:
 <ul>
    <li>The entire generic SIMD library is included from the header file
 <gsimd.h>.</li>
    <li>Using proper platform-specific compiler flags, the code can be
 compiled by standard G++ into binaries for different target SIMD
 architectures.</li>
    <li>In this example, svec4_f is the SIMD vector abstraction provided by
 the library. It represents a vector of 4 floating-point values.</li>
    <li>Most operations on SIMD vectors use standard C++ operators
 such as "*" and "<<".</li>
 </ul>

 @section features Key features

 The library provides:
 <ul>

   <li><b>Fixed-lane SIMD vectors.</b> Our SIMD vectors are defined
   based on the number of elements per vector (<i>fixed-lane</i>)
   instead of the byte-length of a vector (<i>fixed-width</i>). This
   is the key diffence between our vector types and the ones defined
   in platform-specific intrinsics.

   We choose fixed-lane vector because it is more natural to SIMDized
   parallel loops that involve data of different length such as int
   and double.

   We intend to support vectors with arbitrary power-of-two lanes, but
   currently only 4-element vectors are supported. Vector of 2-, and
   8-elements are under development.

  </li> 
  
  <li><b>Portable SIMD programming.</b> The programming interface of
  the library is completely platform neutral. The library provides
  mapping from the interface to target SIMD platforms. The current
  release supports the following target platforms:
      <ul>
      <li> SSE4.2 </li>
      <li> VSX for P7</li>
      <li> Scalar emulation for non-SIMD platforms</li>
    </ul>
  </li>

  <li><b>Overloaded C++ semantics on SIMD vectors.</b> We define SIMD
  vector operations based on semantics of C++ operators instead of
  platform-specific ISA semantics. This is because the semantics of
  C++ operators are platform independent. Secondly, C++ operators
  provide a slightly higher semantics than platform-specific
  intrinsics and are more natural to program since most users
  understand C++ operators well.
  </li>

 </ul>

 @section info More Information

<ul>
<li>@ref getting_started</li>
<li>@ref programming_guide</li>
<li>@ref developer_guide</li>
<li>@ref performance</li>
<li>@ref issues</li>
<li>@ref history</li>
</ul>

*/