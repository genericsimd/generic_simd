/**

 @mainpage  Generic SIMD Library
 
 @tableofcontents

 The Generic SIMD Library allowers users to write C++ SIMD codes that
 are portable across different SIMD ISAs.

 @section example An Example
 
 Here is the helloWorld example of using the generic SIMD intrinsics interface.
 
@code HelloSIMD.cpp
#include <iostream>
#include <gsimd.h>

int main (int argc, char* argv[])
{
    svec4_f v1(1.1, 2.2, 3.3, 4.4);
    svec4_f v2 = v1 * 2;
    std::cout << "Hello World: " << v2 << std::endl;
    return 0;
}
@endcode

 The entire generic SIMD library is included from the header file
 <gsimd.h>.

 Using proper platform-specific compiler flags, the code can be
 compiled by standard G++ into binaries for different target SIMD
 architectures.

 In this example, svec4_f is the SIMD vector abstraction provided by
 the library. It represents a vector of 4 floating-point values.

 Also note that operations on SIMD vectors use standard C++ operators
 such as "*" and "<<".

 @section features Key features

 The library provides:
 <ul>
   <li><b>Fixed-lane SIMD vectors.</b>: 4-element vectors are supported. Vector of 2-, and 8-elements are under development.
   Note that traditional SIMD intrinsics such as AltiVec or SSE
   intrinsics are based on <i>fixed-width</i> instead of
   <i>fixed-lane</i> vectors. Fixed-lane vectors are more natural to
   program when dealing with parallel loops using different length
   data types such as int and double.  
  </li> 
  <li><b>Portable SIMD programming.</b> Current release supports the following target platforms:
     <ul>
      <li> SSE4.2 </li>
      <li> VSX for P7</li>
      <li> Scalar emulation for non-SIMD platforms</li>
    </ul>
  </li>
  <li><b>Overloaded C++ operators on SIMD vectors.</b> SIMD vector operation semantics are defined based on 
   common C++ operators instead of platform-specific ISA semantics. The former provides a slightly higher 
   semantics than the latter and is more natural to program since most users understand C++ operators well. 
  </li>
 </ul>

 @section info More Information

<ul>
<li>@ref getting_started</li>
<li>@ref programming_guide</li>
<li>@ref developer_guide</li>
<li>@ref performance</li>
<li>@ref issues</li>
<li>@ref history</li>
</ul>

*/